#include "imports/stdlib.fc";

{-
  ;; first ref is reserved for token data
  storage#_ ^TokenData
          = Storage;
-}

;; storage variables
global slice owner;
() execute (cell) impure asm "c5 POPCTR";


(int) load_data() inline {                 ;; read function declaration - returns int as result
  var ds = get_data().begin_parse();       ;; load the storage cell and start parsing as a slice
  return (ds~load_uint(64));               ;; read a 64 bit unsigned int from the slice and return it
}

() save_data() impure inline {  ;; write function declaration - takes an int as arg
  set_data(begin_cell()                    ;; store the storage cell and create it with a builder 
    .store_uint(counter, 64)
    .store              ;; write a 64 bit unsigned int to the builder
    .end_cell());                          ;; convert the builder to a cell
}
;; Messages
() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {  ;; well known function signature
  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    load_data();
    authorize(sender_address);
}
;; getters

int profile() method_id {        ;; getter declaration - returns int as result
  var (profile) = load_data();   ;; call our read utility function to load value
  return profile;
}

;; authorisation
() authorize (sender) inline {
  throw_unless(187, equal_slice_bits(sender, addr1) | equal_slice_bits(sender, addr2));
}
