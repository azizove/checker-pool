#pragma version >=0.2.0;

#include "imports/stdlib.fc";
#include "imports/constants.fc";
#include "imports/utils.fc";
(cell, (slice, int)) ~udict::delete_get?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUDELGET" "NULLSWAPIFNOT";
(cell, ()) ~udict::set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTUSET";
(slice, int) udict::get?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUGET" "NULLSWAPIFNOT";
(cell, int, slice, int) udict::delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) "DICTUREMMIN" "NULLSWAPIFNOT" "NULLSWAPIFNOT";

;; =============== storage =============================
global int id;
global cell profiles;

() load_data() impure {
  var cs = get_data().begin_parse();
  id = cs~load_uint(32);
  profiles = cs~load_dict();
  cs.end_parse();
}


() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
	int op = in_msg_body~load_uint(32);
	;; int query_id = in_msg_body~load_uint(64);


  load_data();
	


	if (op == 1) {
		int key = in_msg_body~load_uint(256);
		profiles~udict_set(256, key, in_msg_body);
    	set_data(begin_cell().store_uint(id, 32).store_dict(profiles).end_cell());
		return ();
	}

	;; if (op == 2) {
	;; 	in_msg_body.end_parse();
	;; 	int key = -1;
	;; 	do {
	;; 		(key, slice cs, int f) = dic.udict_get_next?(256, key);
	;; 		if (f) {
	;; 			int valid_until = cs~load_uint(64);
	;; 			if (valid_until < now()) {
	;; 				dic~udict_delete?(256, key);
	;; 			}
	;; 		}
	;; 	} until (~ f);

	;; 	if (dic.dict_empty?()) {
	;; 		set_data(begin_cell().end_cell());
	;; 	} else {
	;; 		set_data(dic);
	;; 	}

	;; 	return ();
	;; }

	throw (12);
}

slice get_key(int key) method_id {
	load_data();
	(slice payload, int success) = profiles.udict_get?(256, key);
	throw_unless(key, success);
  	return payload;
}